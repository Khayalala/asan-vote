import { create } from "zustand";
import confetti from "canvas-confetti";

const API_URL = "http://localhost:3000";

const useVoteStore = create((set) => ({
  centers: [
    "1 saylÄ± BakÄ± ASAN xidmÉ™t mÉ™rkÉ™zi",
    "2 saylÄ± BakÄ± ASAN xidmÉ™t mÉ™rkÉ™zi",
    "3 saylÄ± BakÄ± ASAN xidmÉ™t mÉ™rkÉ™zi",
    "4 saylÄ± BakÄ± ASAN xidmÉ™t mÉ™rkÉ™zi",
    "5 saylÄ± BakÄ± ASAN xidmÉ™t mÉ™rkÉ™zi",
    "6 saylÄ± BakÄ± ASAN xidmÉ™t mÉ™rkÉ™zi",
    "7 saylÄ± BakÄ± ASAN xidmÉ™t mÉ™rkÉ™zi",
    "SumqayÄ±t regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "GÉ™ncÉ™ regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "2 saylÄ± GÉ™ncÉ™ regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "BÉ™rdÉ™ regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "Sabirabad regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "QÉ™bÉ™lÉ™ regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "MingÉ™Ã§evir regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "MasallÄ± regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "Quba regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "Ä°miÅŸli regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "ÅžÉ™ki regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "Tovuz regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "ÅžamaxÄ± regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "BalakÉ™n regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "KÃ¼rdÉ™mir regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "AÄŸcabÉ™di regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "Salyan regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "NaxÃ§Ä±van regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "ÅžuÅŸa regional ASAN xidmÉ™t mÉ™rkÉ™zi",
    "Ä°nnovasiyalar MÉ™rkÉ™zi",
    "ABAD publik hÃ¼quqi ÅŸÉ™xs",
    "ASAN Radio",
    "AKT",
    "YaÅŸÄ±l ASAN",
  ],
  votes: Array(31).fill(0),
  hasVoted: false,

  // âœ… Fetch votes from the backend
  fetchVotes: async () => {
    try {
      const response = await fetch(`${API_URL}/api/results`);
      if (!response.ok) throw new Error("Failed to fetch results");

      const data = await response.json();
      const newVotes = Array(31).fill(0);

      // âœ… Map vote counts correctly
      data.forEach((vote) => {
        newVotes[vote._id] = vote.count;
      });

      set({ votes: newVotes });
    } catch (error) {
      console.error("Error fetching votes:", error);
    }
  },

  // âœ… Check if the user has already voted based on their IP
  checkIfVoted: async () => {
    try {
      const response = await fetch(`${API_URL}/api/check-vote`);
      const data = await response.json();

      if (data.hasVoted) {
        set({ hasVoted: true });
      } else {
        set({ hasVoted: false });
      }
    } catch (error) {
      console.error("Error checking vote status:", error);
    }
  },

  // âœ… Cast a vote
  vote: async (index) => {
    try {
      const response = await fetch(`${API_URL}/api/vote`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ centerId: index }),
      });

      const data = await response.json();

      if (response.ok) {
        set({ hasVoted: true });

        // âœ… Fetch updated votes after voting
        await useVoteStore.getState().fetchVotes();

        // âœ… Confetti effect ðŸŽ‰
        confetti({
          particleCount: 150,
          spread: 70,
          origin: { y: 0.6 },
        });
      } else {
        alert(data.error);
      }
    } catch (error) {
      console.error("Error submitting vote:", error);
      alert("Server error, please try again later.");
    }
  },
}));

export default useVoteStore;
